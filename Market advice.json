{
  "name": "Market advice",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -48,
        144
      ],
      "id": "64f6c417-e045-43b3-9de6-f22780e9c1a0",
      "name": "When chat message received",
      "webhookId": "762f7fec-4752-4001-be70-b4243e734451"
    },
    {
      "parameters": {
        "url": "https://api.twelvedata.com/time_series",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $json.chatInput }}"
            },
            {
              "name": "interval",
              "value": "1min"
            },
            {
              "name": "outputsize",
              "value": "100"
            },
            {
              "name": "apikey",
              "value": "cde41354ea164ab6b80694dfd3895f71"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        208,
        0
      ],
      "id": "a1d3b187-a79e-4943-b0c5-8cb866297018",
      "name": "HTTP 1min"
    },
    {
      "parameters": {
        "url": "https://api.twelvedata.com/time_series",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $json.chatInput }}"
            },
            {
              "name": "interval",
              "value": "15min"
            },
            {
              "name": "outputsize",
              "value": "100"
            },
            {
              "name": "apikey",
              "value": "cde41354ea164ab6b80694dfd3895f71"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        208,
        144
      ],
      "id": "bf9b478e-aa81-439f-afed-59f0a2f1f741",
      "name": "HTTP 15min"
    },
    {
      "parameters": {
        "url": "https://api.twelvedata.com/time_series",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $json.chatInput }}"
            },
            {
              "name": "interval",
              "value": "1h"
            },
            {
              "name": "outputsize",
              "value": "100"
            },
            {
              "name": "apikey",
              "value": "cde41354ea164ab6b80694dfd3895f71"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        208,
        304
      ],
      "id": "04038b2f-cad1-4812-91e3-23e44a01d3a5",
      "name": "HTTP 1hr"
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        496,
        128
      ],
      "id": "c56d2f38-bcd4-4b9d-a5ac-03fe3ab5a5ce",
      "name": "Merge"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        672,
        144
      ],
      "id": "b0c1d639-a2da-455c-89bd-b1587ab3fe26",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "jsCode": "const root = items[0].json;\n\n// extract datasets\nconst data1m = root.data[0]; // 1min\nconst data15m = root.data[1]; // 15min\nconst data1h = root.data[2]; // 1h\n\n// standardize format\nfunction normalize(values) {\n    return values\n        .map(v => ({\n            time: new Date(v.datetime),\n            open: parseFloat(v.open),\n            high: parseFloat(v.high),\n            low: parseFloat(v.low),\n            close: parseFloat(v.close),\n            volume: parseFloat(v.volume),\n        }))\n        .sort((a, b) => a.time - b.time);\n}\n\nreturn [{\n    json: {\n        ticker: data1m.meta.symbol,\n        candles1m: normalize(data1m.values),\n        candles15m: normalize(data15m.values),\n        candles1h: normalize(data1h.values),\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        832,
        144
      ],
      "id": "7d5bb921-91cc-40cd-a0a4-6fe1e2b72610",
      "name": "Code"
    },
    {
      "parameters": {
        "url": "https://newsdata.io/api/1/latest",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ $json.chatInput }}"
            },
            {
              "name": "apikey",
              "value": "pub_756451294d54417b9b63c2953156889b"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        224,
        528
      ],
      "id": "e8e2a8e6-1894-4e02-9120-c6ba2202a544",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.5-pro",
          "mode": "list",
          "cachedResultName": "models/gemini-2.5-pro"
        },
        "messages": {
          "values": [
            {
              "content": "=You are a highly intelligent and accurate sentiment analyzer specializing in the financial markets. Analyze the sentiment of the provided text.\n\nEvaluate the immediate market reaction, recent news impact, and technical volatility.\n\nDetermine a sentiment category: \"Positive\", \"Neutral\", or \"Negative\".\n\nCalculate a numerical score between -1 (extremely negative) and 1 (extremely positive).\n\nProvide a concise rationale explaining the short-term sentiment (give a detailed response with appropriate headlines for major events.\n\nYour output must be exactly a JSON object. The value must be an object with three keys: \"category\", \"score\", and \"rationale\". Do not output any additional text.\n\nFor example, your output should look like:\n\n{\n\"shortTermSentiment\": {\n\"category\": \"Positive\",\n\"score\": 0.7,\n\"rationale\": \"...\"\n\nNow, analyze the following text and produce your JSON output:\n{{\nJSON.stringify($json.results) }}"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        480,
        528
      ],
      "id": "3c3d8a23-07fb-4d2d-ba65-7aeb1d47cb01",
      "name": "Message a model1",
      "credentials": {
        "googlePalmApi": {
          "id": "f2jStfc74j5IND04",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1024,
        240
      ],
      "id": "55ef90d5-485e-4d95-aee1-dc4fc83e09e5",
      "name": "Merge1"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1232,
        240
      ],
      "id": "c7cda086-f0cf-41a3-b6d0-0656535afec3",
      "name": "Aggregate1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an expert day trader. Using the data below, please give a single, unified trade recommendation—Buy, Sell, or Hold—based on both price action (1m, 15m, 1h candles) and 24h sentiment. Then provide:\n\n• Technical Recommendation (Buy, Sell, or Hold; incorporating candle analysis and sentiment)\n• Entry Price\n• Stop-Loss\n• Target/Exit Price\n\nProvide your answer as plain text with bullet points and clear line breaks.\n\nTechnical Data (candles):\n{{ JSON.stringify($json.data[0]) }}\n\nSentiment Analysis (past 24h):\n{{ JSON.stringify($json.data[1]) }}\n\nEach candle object has:\n\ntimeframe: \"1m\", \"15m\", or \"1h\"\n\ncandles: [openTime, open, high, low, close, volume, …]\n\nSteps for the agent:\n\nGroup candles by timeframe (1m, 15m, 1h).\n\nUse 1m & 15m action + indicators (RSI, MACD, trendlines) for optimal entry.\n\nConfirm trend with 1h data.\n\nFactor in sentiment to refine the Buy/Sell/Hold call.\n\nResponse format (no extra text!):\nTechnical Recommendation: <BUY|SELL|HOLD>\n\nEntry Price: <number>\n\nStop-Loss: <number>\n\nTarget/Exit Price: <number>",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        1424,
        240
      ],
      "id": "7a720ace-8474-4d66-bd5c-2fd9de61e127",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1408,
        432
      ],
      "id": "2637cd6c-8f2b-418e-b44e-912043b90fdf",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "f2jStfc74j5IND04",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "HTTP 1min",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP 15min",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP 1hr",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP 1hr": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "HTTP 15min": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "HTTP 1min": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Message a model1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Aggregate1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "86897103-59c8-4b6d-b663-fd707e7da030",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "9f30b6e08ab45326f0ca0a1695346b80264ef65a4a2f8ff14bf74d46bdeb21bd"
  },
  "id": "1dsqWeY7nEMaKNLo",
  "tags": []
}
